
// Robie Sr. Sonic Sensor Obstacle Avoidance using Analog pins. (You can ignore my color wire codes)
// By KB3HXA.

// Define Sensor Pins

int EchoL = A0; //white
int TrigL = A1; // blue

int EchoF = A2; //purple
int TrigF = A3;//gray

int EchoR = A5;  //white
int TrigR = A4; // blue

// Set up motor driver I/O

int ENA = 2; // green
int in1 = 3; //yellow
int in2 = 4; //orange

int ENB = 5; // brown
int in3 = 6; // purple
int in4 = 7; // gray

// Set motor dirver speed.

int ABS = 200;

// Initialize Sensor distances

int rightDistance = 0;
int leftDistance = 0;
int frontDistance = 0;

// Define Functions

void _mBack()
{
 analogWrite(ENA,ABS);
 analogWrite(ENB,ABS);
 digitalWrite(in1,HIGH);
 digitalWrite(in2,LOW);
  
 digitalWrite(in3,HIGH);
 digitalWrite(in2,LOW);
 
 Serial.println("go back!"); // Will output sensor status to serial monitor for testing.
}

void _mForward()
{
 analogWrite(ENA,ABS);
 analogWrite(ENB,ABS);
 digitalWrite(in1,LOW);
 digitalWrite(in2,HIGH);

 analogWrite(ENA,ABS);
 analogWrite(ENB,ABS);
 digitalWrite(in3,LOW);
 digitalWrite(in4,HIGH);

 Serial.println("go forward!");
}

void _mleft()
{
 analogWrite(ENA,ABS);
 digitalWrite(in1,HIGH);
 digitalWrite(in2,LOW);
 
 analogWrite(ENB,ABS);
 digitalWrite(in3,LOW);
 digitalWrite(in4,HIGH);
 
 Serial.println("go left!");
}

void _mright()
{
 analogWrite(ENA,ABS);
 analogWrite(ENB,ABS);
 digitalWrite(in1,LOW);
 digitalWrite(in2,HIGH);

 analogWrite(ENA,ABS);
 analogWrite(ENB,ABS);
 digitalWrite(in3,HIGH);
 digitalWrite(in4,LOW);
 Serial.println("go right!");
} 


  void _mStop()
{
  digitalWrite(ENA,LOW);
  digitalWrite(ENB,LOW);
  Serial.println("Stop!");
} 

// Sensor functions to measure distances.

int rDistance_test()   
{
  digitalWrite(TrigR, LOW);   
  delayMicroseconds(20);
  digitalWrite(TrigR, HIGH);  
  delayMicroseconds(20);
  digitalWrite(TrigR, LOW);   
  float rdistance = pulseIn(EchoR, HIGH);  
  rdistance= rdistance/58;       
  return (int)rdistance;
}
  int lDistance_test()   
{
  digitalWrite(TrigL, LOW);   
  delayMicroseconds(20);
  digitalWrite(TrigL, HIGH);  
  delayMicroseconds(20);
  digitalWrite(TrigL, LOW);   
  float ldistance = pulseIn(EchoL, HIGH);  
  ldistance= ldistance/58;       
  return (int)ldistance;
  
}

  int fDistance_test()   
{
  digitalWrite(TrigF, LOW);   
  delayMicroseconds(20);
  digitalWrite(TrigF, HIGH);  
  delayMicroseconds(20);
  digitalWrite(TrigF, LOW);   
  float fdistance = pulseIn(EchoF, HIGH);  
  fdistance= fdistance/58;       
  return (int)fdistance;
}

// Set up Pins as input and output. R (Right) L (Lef) F (Front. )Start serial Com.

  void setup() { 
 
    Serial.begin(9600); 
     
  pinMode(EchoR, INPUT);
  pinMode(TrigR, OUTPUT);
  pinMode(EchoL, INPUT);
  pinMode(TrigL, OUTPUT);
  pinMode(TrigF,OUTPUT);
  pinMode(EchoF,INPUT);
  
  pinMode(ENA,OUTPUT);
  pinMode(in1,OUTPUT);
  pinMode(in2,OUTPUT);

  pinMode(ENB,OUTPUT);
  pinMode(in3,OUTPUT);
  pinMode(in4,OUTPUT);

 
} 
  void loop() {

 // Each sensor checks current distance to objects in field of view.
  
    rightDistance = rDistance_test();
    #ifdef send
    Serial.print("rDistance=");
    Serial.println(rDistance);
    delay(200)
    #endif

    
    leftDistance = lDistance_test();
    #ifdef send
    Serial.print("lDistance=");
    Serial.println(lDistance);
    delay(200)
    #endif


    frontDistance = fDistance_test();
    #ifdef send
    Serial.print("fDistance=");
    Serial.println(fDistance);
    delay(200)
    #endif


// Program instructions.


{
    if ((rightDistance >=41) && (leftDistance>=41)) // MOVE FORWARD
{
      
   _mForward();

} 
    
    else if ((rightDistance>leftDistance) && (rightDistance>=41)) // MOVE RIGHT
{
   
       
         _mright();
       
} 

         else if ((leftDistance>rightDistance)&& (leftDistance>=41)) // MOVE LEFT
{
        _mleft();
        
}

   
     if ((frontDistance<41) && (rightDistance>leftDistance))// FRONT DISTANCE STOP RIGHT
     {
     _mStop();
      delay(1000);
      
     _mBack();
     delay (1000);
    
     _mright();
     delay(1000);
     } 
        
       else if ((frontDistance<41) && (leftDistance>rightDistance)) // FRONT DISTANCE STOP LEFT
{

     _mStop();
     delay(1000);

     _mBack();
     delay(1000);
     
      _mleft();
      delay (1000);

}}}
  
